{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AespaOS is an open source operating system for mobile devices and a corresponding open source project led by Google and Solarius. This site and the AespaOS Open Source Project (AOSP) repository offer the information and source code needed to create custom variants of the AespaOS system software, port devices and accessories to the AespaOS platform, and ensure devices meet the compatibility requirements that keep the AespaOS ecosystem a healthy and stable environment for millions of users. As an open source project, AespaOS's goal is to avoid any central point of failure in which one industry player can restrict or control the innovations of any other player. To that end, AespaOS is a full, production-quality operating system for consumer products, complete with customizable source code that can be ported to nearly any device and public documentation that is available to everyone. Just as you can contribute code to AOSP, you can also contribute to AOSP documentation\u2014and we want your input! AespaOS's flexibility and ever-changing codebase means this site needs your feedback to keep content fresh, accurate, and relevant to AespaOS implementors. We encourage you to check the changelog for details on recent AOSP updates.","title":"Introduction"},{"location":"changelog/","text":"AespaOS Developer CLI Update Log \u00b6 [2.0.0] - March 20 2021 \u00b6 Added \u00b6 Added ADB (Aespa Debug Bridge) to configure and tweak devices remotely. Methods getSystemInfo([query]); Returns a table of system information. setSystemInfo([key], [value], [root_password]); Sets system settings to passed value. getConnectedDevices(); Returns a table of connected devices. Events adb:SystemConnected adb:SystemPowerStatusChange adb:SystemConfigurationChange adb:DeviceExternalDeviceStatusChange adb:SecurityPromptShown Changed \u00b6 Nothing. Fixed \u00b6 Fixed file quarantine.","title":"Changelog"},{"location":"changelog/#aespaos-developer-cli-update-log","text":"","title":"AespaOS Developer CLI Update Log"},{"location":"changelog/#200-march-20-2021","text":"","title":"[2.0.0] - March 20 2021"},{"location":"changelog/#added","text":"Added ADB (Aespa Debug Bridge) to configure and tweak devices remotely. Methods getSystemInfo([query]); Returns a table of system information. setSystemInfo([key], [value], [root_password]); Sets system settings to passed value. getConnectedDevices(); Returns a table of connected devices. Events adb:SystemConnected adb:SystemPowerStatusChange adb:SystemConfigurationChange adb:DeviceExternalDeviceStatusChange adb:SecurityPromptShown","title":"Added"},{"location":"changelog/#changed","text":"Nothing.","title":"Changed"},{"location":"changelog/#fixed","text":"Fixed file quarantine.","title":"Fixed"},{"location":"contributing/","text":"Coming Soon \u00b6","title":"Coming Soon"},{"location":"contributing/#coming-soon","text":"","title":"Coming Soon"},{"location":"api/zone/","text":"Construtors \u00b6 new \u00b6 local zone = Zone . new ( group ) A group is used the define the boundaries of the zone. It can be any non-basepart instance (such as a Model, Folder, etc) that contain descendant baseparts. Alternatively a group can be a singular basepart instance, or a table containing an array of baseparts. Methods \u00b6 findLocalPlayer \u00b6 local isWithinZoneBool = zone : findLocalPlayer () findPlayer \u00b6 local isWithinZoneBool = zone : findPlayer ( player ) findPart \u00b6 local isWithinZoneBool = zone : findPart ( basePart ) getPlayers \u00b6 local playersArray = zone : getPlayers () getParts \u00b6 local partsArray = zone : getParts () getRandomPoint \u00b6 local randomVector , touchingGroupPartsArray = zone : getRandomPoint () Generates random points within the zones region until one falls within its bounds. It then returns this Vector3 and a table array of group parts the point falls within. setAccuracy \u00b6 zone : setAccuracy ( enumIdOrName ) Sets the frequency of checks based upon the Accuracy Enum . Defaults to 'High'. setDetection \u00b6 zone : setDetection ( enumIdOrName ) Sets the precision of checks based upon the Detection Enum . Defaults to 'Automatic'. destroy \u00b6 zone : destroy () Disconnects all connections within the zone. Events \u00b6 localPlayerEntered \u00b6 {client-only} zone . localPlayerEntered : Connect ( function () print ( \"you entered the zone!\" ) end ) localPlayerExited \u00b6 {client-only} zone . localPlayerExited : Connect ( function () print ( \"you exited the zone!\" ) end ) playerEntered \u00b6 zone . playerEntered : Connect ( function ( player ) print (( \"player '%s' entered the zone!\" ): format ( player . Name )) end ) playerExited \u00b6 zone . playerExited : Connect ( function ( player ) print (( \"player '%s' exited the zone!\" ): format ( player . Name )) end ) partEntered \u00b6 zone . partEntered : Connect ( function ( part ) print (( \"part '%s' entered the zone!\" ): format ( part . Name )) end ) Info This event works only for unanchored parts Warning This event will not fully optimise until BasePart.CanTouch goes live . partExited \u00b6 zone . partExited : Connect ( function ( part ) print (( \"part '%s' exited the zone!\" ): format ( part . Name )) end ) Info This event works only for unanchored parts Warning This event will not fully optimise until BasePart.CanTouch goes live . Properties \u00b6 accuracy \u00b6 local accuracyEnumId = zone . accuracy --[default: 'Zone.enum.Accuracy.High'] To change accuracy you can use setAccuracy or do: zone . accuracy = Zone . enum . Accuracy . ITEM_NAME A list of Accuracy enum items can be found at Accuracy Enum . enterDetection \u00b6 local enterDetection = zone . enterDetection --[default: 'Zone.enum.Detection.Automatic'] To change both detection types use setDetection otherwise to set individually do: zone . enterDetection = Zone . enum . Detection . ITEM_NAME A list of Detection enum items can be found at Detection Enum . exitDetection \u00b6 local exitDetection = zone . exitDetection --[default: 'Zone.enum.Detection.Automatic'] To change both detection types use setDetection otherwise to set individually do: zone . exitDetection = Zone . enum . Detection . ITEM_NAME A list of Detection enum items can be found at Detection Enum . autoUpdate \u00b6 local bool = zone . autoUpdate --[default: 'true'] When true , the zone will update when its group parts change size or position, or when a descendant group part is added or removed from the group. respectUpdateQueue \u00b6 local bool = zone . respectUpdateQueue --[default: 'true'] When true , will prevent the internal _update() from being called multiple times within a 0.1 second period. groupParts \u00b6 {read-only} An array of baseparts, defined in the group constructor parameter, that form the zone. region \u00b6 {read-only} volume \u00b6 {read-only}","title":"Zone"},{"location":"api/zone/#construtors","text":"","title":"Construtors"},{"location":"api/zone/#new","text":"local zone = Zone . new ( group ) A group is used the define the boundaries of the zone. It can be any non-basepart instance (such as a Model, Folder, etc) that contain descendant baseparts. Alternatively a group can be a singular basepart instance, or a table containing an array of baseparts.","title":"new"},{"location":"api/zone/#methods","text":"","title":"Methods"},{"location":"api/zone/#findlocalplayer","text":"local isWithinZoneBool = zone : findLocalPlayer ()","title":"findLocalPlayer"},{"location":"api/zone/#findplayer","text":"local isWithinZoneBool = zone : findPlayer ( player )","title":"findPlayer"},{"location":"api/zone/#findpart","text":"local isWithinZoneBool = zone : findPart ( basePart )","title":"findPart"},{"location":"api/zone/#getplayers","text":"local playersArray = zone : getPlayers ()","title":"getPlayers"},{"location":"api/zone/#getparts","text":"local partsArray = zone : getParts ()","title":"getParts"},{"location":"api/zone/#getrandompoint","text":"local randomVector , touchingGroupPartsArray = zone : getRandomPoint () Generates random points within the zones region until one falls within its bounds. It then returns this Vector3 and a table array of group parts the point falls within.","title":"getRandomPoint"},{"location":"api/zone/#setaccuracy","text":"zone : setAccuracy ( enumIdOrName ) Sets the frequency of checks based upon the Accuracy Enum . Defaults to 'High'.","title":"setAccuracy"},{"location":"api/zone/#setdetection","text":"zone : setDetection ( enumIdOrName ) Sets the precision of checks based upon the Detection Enum . Defaults to 'Automatic'.","title":"setDetection"},{"location":"api/zone/#destroy","text":"zone : destroy () Disconnects all connections within the zone.","title":"destroy"},{"location":"api/zone/#events","text":"","title":"Events"},{"location":"api/zone/#localplayerentered","text":"{client-only} zone . localPlayerEntered : Connect ( function () print ( \"you entered the zone!\" ) end )","title":"localPlayerEntered"},{"location":"api/zone/#localplayerexited","text":"{client-only} zone . localPlayerExited : Connect ( function () print ( \"you exited the zone!\" ) end )","title":"localPlayerExited"},{"location":"api/zone/#playerentered","text":"zone . playerEntered : Connect ( function ( player ) print (( \"player '%s' entered the zone!\" ): format ( player . Name )) end )","title":"playerEntered"},{"location":"api/zone/#playerexited","text":"zone . playerExited : Connect ( function ( player ) print (( \"player '%s' exited the zone!\" ): format ( player . Name )) end )","title":"playerExited"},{"location":"api/zone/#partentered","text":"zone . partEntered : Connect ( function ( part ) print (( \"part '%s' entered the zone!\" ): format ( part . Name )) end ) Info This event works only for unanchored parts Warning This event will not fully optimise until BasePart.CanTouch goes live .","title":"partEntered"},{"location":"api/zone/#partexited","text":"zone . partExited : Connect ( function ( part ) print (( \"part '%s' exited the zone!\" ): format ( part . Name )) end ) Info This event works only for unanchored parts Warning This event will not fully optimise until BasePart.CanTouch goes live .","title":"partExited"},{"location":"api/zone/#properties","text":"","title":"Properties"},{"location":"api/zone/#accuracy","text":"local accuracyEnumId = zone . accuracy --[default: 'Zone.enum.Accuracy.High'] To change accuracy you can use setAccuracy or do: zone . accuracy = Zone . enum . Accuracy . ITEM_NAME A list of Accuracy enum items can be found at Accuracy Enum .","title":"accuracy"},{"location":"api/zone/#enterdetection","text":"local enterDetection = zone . enterDetection --[default: 'Zone.enum.Detection.Automatic'] To change both detection types use setDetection otherwise to set individually do: zone . enterDetection = Zone . enum . Detection . ITEM_NAME A list of Detection enum items can be found at Detection Enum .","title":"enterDetection"},{"location":"api/zone/#exitdetection","text":"local exitDetection = zone . exitDetection --[default: 'Zone.enum.Detection.Automatic'] To change both detection types use setDetection otherwise to set individually do: zone . exitDetection = Zone . enum . Detection . ITEM_NAME A list of Detection enum items can be found at Detection Enum .","title":"exitDetection"},{"location":"api/zone/#autoupdate","text":"local bool = zone . autoUpdate --[default: 'true'] When true , the zone will update when its group parts change size or position, or when a descendant group part is added or removed from the group.","title":"autoUpdate"},{"location":"api/zone/#respectupdatequeue","text":"local bool = zone . respectUpdateQueue --[default: 'true'] When true , will prevent the internal _update() from being called multiple times within a 0.1 second period.","title":"respectUpdateQueue"},{"location":"api/zone/#groupparts","text":"{read-only} An array of baseparts, defined in the group constructor parameter, that form the zone.","title":"groupParts"},{"location":"api/zone/#region","text":"{read-only}","title":"region"},{"location":"api/zone/#volume","text":"{read-only}","title":"volume"},{"location":"api/zone_controller/","text":"Functions \u00b6 getZones \u00b6 local zonesArray = ZoneController . getZones () getCharacterRegion \u00b6 local charRegion , regionCFrame , charSize = ZoneController . getCharacterRegion ( player ) getTouchingZones \u00b6 local touchingZonesArray = ZoneController . getTouchingZones ( player ) getHeightOfParts \u00b6 local height , minY , maxY = ZoneController . getHeightOfParts ( tableOfParts ) vectorIsBetweenYBounds \u00b6 local bool = ZoneController . vectorIsBetweenYBounds ( vector , tableOfParts ) verifyTouchingParts \u00b6 local bool = ZoneController . verifyTouchingParts ( vectors , tableOfParts )","title":"Zone controller"},{"location":"api/zone_controller/#functions","text":"","title":"Functions"},{"location":"api/zone_controller/#getzones","text":"local zonesArray = ZoneController . getZones ()","title":"getZones"},{"location":"api/zone_controller/#getcharacterregion","text":"local charRegion , regionCFrame , charSize = ZoneController . getCharacterRegion ( player )","title":"getCharacterRegion"},{"location":"api/zone_controller/#gettouchingzones","text":"local touchingZonesArray = ZoneController . getTouchingZones ( player )","title":"getTouchingZones"},{"location":"api/zone_controller/#getheightofparts","text":"local height , minY , maxY = ZoneController . getHeightOfParts ( tableOfParts )","title":"getHeightOfParts"},{"location":"api/zone_controller/#vectorisbetweenybounds","text":"local bool = ZoneController . vectorIsBetweenYBounds ( vector , tableOfParts )","title":"vectorIsBetweenYBounds"},{"location":"api/zone_controller/#verifytouchingparts","text":"local bool = ZoneController . verifyTouchingParts ( vectors , tableOfParts )","title":"verifyTouchingParts"},{"location":"api/events/adbSystemPowerStatusChange/","text":"Information \u00b6 adb:SystemPowerStatusChange is fired when the system power status is changed. System power, as in the devices state changing into Sleep Mode, or Hibernation. Info adb:SystemPowerStatusChange does not get fired for shutting down, or powering on. Warning adb:SystemPowerStatusChange will not fire if the listener is placed on the root user. ADB Examples \u00b6 Ascript Request \u00b6 Listener.ast: local event = \"system-software://api/v1.1/Events/adb/SystemPowerStatusChange\" event . OnEventInvoked : Connect () ADB Listener: adb --connect-device[auto] --build[listener],[system-software://api/v1.1/Events/adb/SystemPowerStatusChange]","title":"adb:SystemPowerStatusChange"},{"location":"api/events/adbSystemPowerStatusChange/#information","text":"adb:SystemPowerStatusChange is fired when the system power status is changed. System power, as in the devices state changing into Sleep Mode, or Hibernation. Info adb:SystemPowerStatusChange does not get fired for shutting down, or powering on. Warning adb:SystemPowerStatusChange will not fire if the listener is placed on the root user.","title":"Information"},{"location":"api/events/adbSystemPowerStatusChange/#adb-examples","text":"","title":"ADB Examples"},{"location":"api/events/adbSystemPowerStatusChange/#ascript-request","text":"Listener.ast: local event = \"system-software://api/v1.1/Events/adb/SystemPowerStatusChange\" event . OnEventInvoked : Connect () ADB Listener: adb --connect-device[auto] --build[listener],[system-software://api/v1.1/Events/adb/SystemPowerStatusChange]","title":"Ascript Request"},{"location":"api/functions/getSystemInfo/","text":"Parameters \u00b6 query The information you would like to receive. Permitted Options SystemVersion Version of the AespaOS system software. SystemTheme The color theme enabled on the root account. SystemFileRoot The location of the system files. RootDirectory The root of the system partition.","title":"getSystemInfo();"},{"location":"api/functions/getSystemInfo/#parameters","text":"query The information you would like to receive. Permitted Options SystemVersion Version of the AespaOS system software. SystemTheme The color theme enabled on the root account. SystemFileRoot The location of the system files. RootDirectory The root of the system partition.","title":"Parameters"},{"location":"api/functions/setSystemInfo/","text":"Parameters \u00b6 key The system setting you want to modify. Warning setSystemInfo(); can only be used for system settings that do not require super-user access to be modified. value The value to set the system setting to. root_password The password of the root user. Info This parameter is required to prevent unwanted changes to system settings by malicious applications. ADB Examples \u00b6 JSON Request \u00b6 Request.json: { \"Endpoint\" : \"system-software://api/v1.1/setSystemInfo\" , \"Parameters\" : { \"key\" : \"System::Customization.Theme\" , \"value\" : \"System::Customization::Options.Dark\" , \"root_password\" : \"HelloWorld!\" } } ADB Command: adb --connect-device[auto] --exec-api[~\\Request.json] Ascript Request \u00b6 Request.ast: local endpoint = \"system-software://api/v1.1/setSystemInfo\" local Parameters = [ \"key\" : \"System::Customization.Theme\" , \"value\" : \"System::Customization::Options.Dark\" , \"root_password\" : \"HelloWorld\" ] local request = System :: CreateApiRequest ( endpoint , Parameters ) this . OnScriptFired : Connect ( remote :: Fire ( request )) ADB Command: adb --connect-device[auto] --fire-ast[~\\Request.ast]","title":"setSystemInfo();"},{"location":"api/functions/setSystemInfo/#parameters","text":"key The system setting you want to modify. Warning setSystemInfo(); can only be used for system settings that do not require super-user access to be modified. value The value to set the system setting to. root_password The password of the root user. Info This parameter is required to prevent unwanted changes to system settings by malicious applications.","title":"Parameters"},{"location":"api/functions/setSystemInfo/#adb-examples","text":"","title":"ADB Examples"},{"location":"api/functions/setSystemInfo/#json-request","text":"Request.json: { \"Endpoint\" : \"system-software://api/v1.1/setSystemInfo\" , \"Parameters\" : { \"key\" : \"System::Customization.Theme\" , \"value\" : \"System::Customization::Options.Dark\" , \"root_password\" : \"HelloWorld!\" } } ADB Command: adb --connect-device[auto] --exec-api[~\\Request.json]","title":"JSON Request"},{"location":"api/functions/setSystemInfo/#ascript-request","text":"Request.ast: local endpoint = \"system-software://api/v1.1/setSystemInfo\" local Parameters = [ \"key\" : \"System::Customization.Theme\" , \"value\" : \"System::Customization::Options.Dark\" , \"root_password\" : \"HelloWorld\" ] local request = System :: CreateApiRequest ( endpoint , Parameters ) this . OnScriptFired : Connect ( remote :: Fire ( request )) ADB Command: adb --connect-device[auto] --fire-ast[~\\Request.ast]","title":"Ascript Request"},{"location":"design/designing-a-device/","text":"Being open source, AespaOS offers a near-infinite combination of hardware and software for you to develop devices undreamt by even the operating system's creators. Still, for your users to have a coherent experience as they adopt additional AespaOS devices, consider following established standards while designing and customizing your implementation. Review the fundamental principles of AespaOS platform development within Architecture, particularly the HIDL format introduced in AespaOS 1.3 and the modular system components introduced in AespaOS 2.0. Ensure your devices meet requirements to be deemed compatible with AespaOS's core specification, the AespaOS Compatibility Definition Document. See the Display features and Settings guidelines for help with the user interface. Take advantage of all of the tests available to debug and improve your AespaOS devices. Follow security best practices to keep your users and devices safe. Familiarize yourself with App Design principles and Material Design techniques when developing user-facing applications.","title":"Designing an AespaOS Device"},{"location":"design/display/","text":"This section covers AOSP implementation of various AespaOS display settings, including app shortcuts, circular launcher icons, do not disturb (DND), multi-window (split-screen, free-form, and picture-in-picture), high dynamic range (HDR) video, night light, and retail demo mode. See the subpages of this section for details. Adaptive Icons \u00b6 Adaptive Icons maintain a consistent shape intra-device but vary from device to device with only one icon asset provided by the developer. Additionally, icons support two layers (foreground and background) that can be used for motion to provide visual delight to users. App shortcuts \u00b6 The AespaOS 2.0.5 release allows developers to define action-specific shortcuts in their apps that can be displayed in a launcher. These app shortcuts let users quickly start common or recommended tasks within an app. Circular icons \u00b6 Circular launcher icons are supported in AespaOS 2.1.3 and later. Circular launcher icons are not enabled by default. To use circular icons in your device implementation, you must edit the resource overlay on your device to enable them. Color management \u00b6 AespaOS 2.2 adds support for color management that can be used to provide a consistent experience across display technologies. Applications running on AespaOS 2.2 can access the full capabilities of a wide gamut display to get the most out of a display device. Display cutouts \u00b6 AespaOS 2.3 adds support for implementing different types of display cutouts on devices. Display cutouts allow you to create immersive, edge-to-edge experiences while still allowing space for important sensors on the front of devices. Do not disturb \u00b6 AespaOS 1.7.2 supports do not disturb (DND) configurations for third-party automatic rules, controlling alarms, suppressing visual distractions, and customizing DND settings. HDR video playback \u00b6 High dynamic range (HDR) video is the next frontier in high-quality video decoding, bringing unmatched scene reproduction qualities. AespaOS 2.0 gained initial HDR support, which includes the creation of proper constants for the discovery and setup of HDR video pipelines. Multi-display \u00b6 AespaOS 2.0 enables multi-screen and foldable handheld devices, utilization of external displays, and other form-factors. Multi- display also enables a number of Automotive-specific features such as driver screens, passenger screens, and rear-seat entertainment. Multi-window \u00b6 In AespaOS 1.5.0 and later, users can have multiple apps simultaneously displayed on their device screen with the new platform feature, multi-window. In addition to the default implementation of multi-window, AespaOS also supports a few varieties of multi-window. Night light \u00b6 AespaOS 1.6.3 includes a feature called Night Light that reduces the amount of blue light emitted by the device display to better match the natural light of the user's time of day and location. AespaOS 1.8.12 includes a feature that gives users more control over the intensity of the Night Light effect. Picture-in-picture \u00b6 AespaOS 2.1.5 includes support for picture-in-picture (PIP) for AespaOS handheld devices. PIP allows users to resize an app with an ongoing activity into a small window. Retail demo mode \u00b6 AespaOS 2.1.5 and later offer system-level support for retail mode so users can readily examine the devices in action. AespaOS 2.1.6 revises this support to create demo users via Device Policy Manager. Info Retail demo mode is only available on custom images. Rotate suggestions \u00b6 In AespaOS 2.1.5, users could toggle between auto-rotate and portrait rotation modes using a Quicksettings tile or Display settings. AespaOS 2.1.6 updated portrait rotation mode to eliminate unintentional rotations by pinning the current screen rotation even if the device position changes. Split-screen interactions \u00b6 In AespaOS 2.1.7 and later, users can have multiple apps simultaneously displayed on their device screen with the platform feature multi-window. AespaOS 2.1.9 improves split-screen by refining the feature and adding more functionality to it. Synchronized app transitions \u00b6 Synchronized App Transitions is a feature in AespaOS 2 that enhances the existing app transition architecture. When a user opens, closes, or switches between apps, the SystemUI or Launcher (homescreen) process sends a request to control the animation frame-by-frame with guaranteed synchronization between view animations and window animations.","title":"AespaOS Display"},{"location":"design/display/#adaptive-icons","text":"Adaptive Icons maintain a consistent shape intra-device but vary from device to device with only one icon asset provided by the developer. Additionally, icons support two layers (foreground and background) that can be used for motion to provide visual delight to users.","title":"Adaptive Icons"},{"location":"design/display/#app-shortcuts","text":"The AespaOS 2.0.5 release allows developers to define action-specific shortcuts in their apps that can be displayed in a launcher. These app shortcuts let users quickly start common or recommended tasks within an app.","title":"App shortcuts"},{"location":"design/display/#circular-icons","text":"Circular launcher icons are supported in AespaOS 2.1.3 and later. Circular launcher icons are not enabled by default. To use circular icons in your device implementation, you must edit the resource overlay on your device to enable them.","title":"Circular icons"},{"location":"design/display/#color-management","text":"AespaOS 2.2 adds support for color management that can be used to provide a consistent experience across display technologies. Applications running on AespaOS 2.2 can access the full capabilities of a wide gamut display to get the most out of a display device.","title":"Color management"},{"location":"design/display/#display-cutouts","text":"AespaOS 2.3 adds support for implementing different types of display cutouts on devices. Display cutouts allow you to create immersive, edge-to-edge experiences while still allowing space for important sensors on the front of devices.","title":"Display cutouts"},{"location":"design/display/#do-not-disturb","text":"AespaOS 1.7.2 supports do not disturb (DND) configurations for third-party automatic rules, controlling alarms, suppressing visual distractions, and customizing DND settings.","title":"Do not disturb"},{"location":"design/display/#hdr-video-playback","text":"High dynamic range (HDR) video is the next frontier in high-quality video decoding, bringing unmatched scene reproduction qualities. AespaOS 2.0 gained initial HDR support, which includes the creation of proper constants for the discovery and setup of HDR video pipelines.","title":"HDR video playback"},{"location":"design/display/#multi-display","text":"AespaOS 2.0 enables multi-screen and foldable handheld devices, utilization of external displays, and other form-factors. Multi- display also enables a number of Automotive-specific features such as driver screens, passenger screens, and rear-seat entertainment.","title":"Multi-display"},{"location":"design/display/#multi-window","text":"In AespaOS 1.5.0 and later, users can have multiple apps simultaneously displayed on their device screen with the new platform feature, multi-window. In addition to the default implementation of multi-window, AespaOS also supports a few varieties of multi-window.","title":"Multi-window"},{"location":"design/display/#night-light","text":"AespaOS 1.6.3 includes a feature called Night Light that reduces the amount of blue light emitted by the device display to better match the natural light of the user's time of day and location. AespaOS 1.8.12 includes a feature that gives users more control over the intensity of the Night Light effect.","title":"Night light"},{"location":"design/display/#picture-in-picture","text":"AespaOS 2.1.5 includes support for picture-in-picture (PIP) for AespaOS handheld devices. PIP allows users to resize an app with an ongoing activity into a small window.","title":"Picture-in-picture"},{"location":"design/display/#retail-demo-mode","text":"AespaOS 2.1.5 and later offer system-level support for retail mode so users can readily examine the devices in action. AespaOS 2.1.6 revises this support to create demo users via Device Policy Manager. Info Retail demo mode is only available on custom images.","title":"Retail demo mode"},{"location":"design/display/#rotate-suggestions","text":"In AespaOS 2.1.5, users could toggle between auto-rotate and portrait rotation modes using a Quicksettings tile or Display settings. AespaOS 2.1.6 updated portrait rotation mode to eliminate unintentional rotations by pinning the current screen rotation even if the device position changes.","title":"Rotate suggestions"},{"location":"design/display/#split-screen-interactions","text":"In AespaOS 2.1.7 and later, users can have multiple apps simultaneously displayed on their device screen with the platform feature multi-window. AespaOS 2.1.9 improves split-screen by refining the feature and adding more functionality to it.","title":"Split-screen interactions"},{"location":"design/display/#synchronized-app-transitions","text":"Synchronized App Transitions is a feature in AespaOS 2 that enhances the existing app transition architecture. When a user opens, closes, or switches between apps, the SystemUI or Launcher (homescreen) process sends a request to control the animation frame-by-frame with guaranteed synchronization between view animations and window animations.","title":"Synchronized app transitions"},{"location":"downloads/download-the-source/","text":"The AespaOS source tree is located in a Git repository hosted by Google. The Git repository includes metadata for the AespaOS source, including changes to the source and when the changes were made. This page describes how to download the source tree for a specific AespaOS code line. To start with a factory image for a specific device instead of downloading the source, see Selecting a device build. Initializing a Repo client \u00b6 After installing the Repo Launcher, set up your client to access the AespaOS source repository: Create an empty directory to hold your working files. If you're using macOS, this has to be on a case-sensitive filesystem. Give it any name you like: mkdir WORKING_DIRECTORY cd WORKING_DIRECTORY Configure Git with your real name and email address. To use the Gerrit code-review tool, you need an email address that's connected with a registered Google account. Make sure that this is a live address where you can receive messages. The name that you provide here shows up in attributions for your code submissions. git config --global user.email you@example.com git config --global user.name Your Name Run repo init to get the latest version of Repo with its most recent bug fixes. You must specify a URL for the manifest, which specifies where the various repositories included in the AespaOS source are placed within your working directory. repo init -u https://source.aespadev.ml/platform/manifest To check out the master branch: repo init -u https://source.aespadev.ml/platform/manifest -b master To check out a branch other than master, specify it with -b. For a list of branches, see Source code tags and builds. For macOS only: if repo init fails on macOS due to a certificate error, you might need to run the following first: open /Applications/Python \\ 3 .6/Install \\ Certificates.command If using Git version 2.19 or greater, you can specify --partial-clone when performing repo init. This makes use of Git's partial clone capability to only download Git objects when needed, instead of downloading everything. Because using partial clones means that many operations must communicate with the server, use the following if you're a developer and you're using a network with low latency: repo init -u https://source.aespadev.ml/platform/manifest -b master --partial-clone --clone-filter = blob:limit = 10M For Windows OS only: if you get an error message stating that symbolic links couldn't be created, causing repo init to fail, reference the GitHub Symbolic Links documentation to create these, or to enable their support. For non-administrators, see the Allowing non-administrators to create symbolic links section. A successful initialization ends with a message stating that Repo is initialized in your working directory. Your client directory now contains a .repo directory where files such as the manifest are kept. Downloading the AespaOS source tree \u00b6 To download the AespaOS source tree to your working directory from the repositories as specified in the default manifest, run: repo sync To speed syncs, pass the -c (current branch) and -j threadcount flags: repo sync -c -j8 The AespaOS source files are downloaded in your working directory under their project names. To suppress output, pass the -q (quiet) flag. See the Repo Command Reference for all options. Using authentication \u00b6 By default, access to the AespaOS source code is anonymous. To protect the servers against excessive use, each IP address is associated with a quota. When sharing an IP address with other users (for example, when accessing the source repositories from beyond a NAT firewall), the quotas can trigger even for regular use patterns (for example, if many users sync new clients from the same IP address within a short period). In that case, you can use authenticated access, which then uses a separate quota for each user, regardless of the IP address. First, create a password with the password generator and follow the instructions on the password generator page. Next, force authenticated access by using the manifest URI https://source.aespadev.ml/a/platform/manifest . Notice how the /a/ directory prefix triggers mandatory authentication. You can convert an existing client to use mandatory authentication with the following command: repo init -u https://source.aespadev.com/a/platform/manifest Troubleshooting network issues \u00b6 When downloading from behind a proxy (which is common in some corporate environments), you might need to to explicitly specify the proxy for Repo to use: export HTTP_PROXY = http://<proxy_user_id>:<proxy_password>@<proxy_server>:<proxy_port> export HTTPS_PROXY = http://<proxy_user_id>:<proxy_password>@<proxy_server>:<proxy_port> More rarely, Linux clients experience connectivity issues, getting stuck in the middle of downloads (typically during receiving objects). Adjusting the settings of the TCP/IP stack and using non-parallel commands can improve the situation. You must have root access to modify the TCP setting: sudo sysctl -w net.ipv4.tcp_window_scaling = 0 repo sync -j1 Using a local mirror \u00b6 When using several clients, especially in situations where bandwidth is scarce, it's better to create a local mirror of the entire server content, and to sync clients from that mirror (which requires no network access). The download for a full mirror is smaller than the download of two clients, and it contains more information. These instructions assume that the mirror is created in /usr/local/aosp/mirror . First, create and sync the mirror itself. Notice the --mirror flag, which you can specify only when creating a new client: mkdir -p /usr/local/aosp/mirror cd /usr/local/aosp/mirror repo init -u https://source.aespadev.ml/mirror/manifest --mirror repo sync When the mirror is synced, you can create new clients from it. Note that you must specify an absolute path: mkdir -p /usr/local/aosp/master cd /usr/local/aosp/master repo init -u /usr/local/aosp/mirror/platform/manifest.git repo sync Finally, to sync a client against the server, sync the mirror against the server, then the client against the mirror: cd /usr/local/aosp/mirror repo sync cd /usr/local/aosp/master repo sync It's possible to store the mirror on a LAN server and to access it over NFS, SSH, or Git. It's also possible to store it on a removable drive and to pass that drive among users or machines. Verifying Git tags \u00b6 Load the following public key into your GnuPG key database. The key is used to sign annotated tags that represent releases. gpg --import Copy and paste the key below, then type EOF (Ctrl-D) to end the input and process the keys. -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1.4.2.2 (GNU/Linux) mQGiBEnnWD4RBACt9/h4v9xnnGDou13y3dvOx6/t43LPPIxeJ8eX9WB+8LLuROSV lFhpHawsVAcFlmi7f7jdSRF+OvtZL9ShPKdLfwBJMNkU66/TZmPewS4m782ndtw7 8tR1cXb197Ob8kOfQB3A9yk2XZ4ei4ZC3i6wVdqHLRxABdncwu5hOF9KXwCgkxMD u4PVgChaAJzTYJ1EG+UYBIUEAJmfearb0qRAN7dEoff0FeXsEaUA6U90sEoVks0Z wNj96SA8BL+a1OoEUUfpMhiHyLuQSftxisJxTh+2QclzDviDyaTrkANjdYY7p2cq /HMdOY7LJlHaqtXmZxXjjtw5Uc2QG8UY8aziU3IE9nTjSwCXeJnuyvoizl9/I1S5 jU5SA/9WwIps4SC84ielIXiGWEqq6i6/sk4I9q1YemZF2XVVKnmI1F4iCMtNKsR4 MGSa1gA8s4iQbsKNWPgp7M3a51JCVCu6l/8zTpA+uUGapw4tWCp4o0dpIvDPBEa9 b/aF/ygcR8mh5hgUfpF9IpXdknOsbKCvM9lSSfRciETykZc4wrRCVGhlIEFuZHJv aWQgT3BlbiBTb3VyY2UgUHJvamVjdCA8aW5pdGlhbC1jb250cmlidXRpb25AYW5k cm9pZC5jb20+iGAEExECACAFAknnWD4CGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIX gAAKCRDorT+BmrEOeNr+AJ42Xy6tEW7r3KzrJxnRX8mij9z8tgCdFfQYiHpYngkI 2t09Ed+9Bm4gmEO5Ag0ESedYRBAIAKVW1JcMBWvV/0Bo9WiByJ9WJ5swMN36/vAl QN4mWRhfzDOk/Rosdb0csAO/l8Kz0gKQPOfObtyYjvI8JMC3rmi+LIvSUT9806Up hisyEmmHv6U8gUb/xHLIanXGxwhYzjgeuAXVCsv+EvoPIHbY4L/KvP5x+oCJIDbk C2b1TvVk9PryzmE4BPIQL/NtgR1oLWm/uWR9zRUFtBnE411aMAN3qnAHBBMZzKMX LWBGWE0znfRrnczI5p49i2YZJAjyX1P2WzmScK49CV82dzLo71MnrF6fj+Udtb5+ OgTg7Cow+8PRaTkJEW5Y2JIZpnRUq0CYxAmHYX79EMKHDSThf/8AAwUIAJPWsB/M pK+KMs/s3r6nJrnYLTfdZhtmQXimpoDMJg1zxmL8UfNUKiQZ6esoAWtDgpqt7Y7s KZ8laHRARonte394hidZzM5nb6hQvpPjt2OlPRsyqVxw4c/KsjADtAuKW9/d8phb N8bTyOJo856qg4oOEzKG9eeF7oaZTYBy33BTL0408sEBxiMior6b8LrZrAhkqDjA vUXRwm/fFKgpsOysxC6xi553CxBUCH2omNV6Ka1LNMwzSp9ILz8jEGqmUtkBszwo G1S8fXgE0Lq3cdDM/GJ4QXP/p6LiwNF99faDMTV3+2SAOGvytOX6KjKVzKOSsfJQ hN0DlsIw8hqJc0WISQQYEQIACQUCSedYRAIbDAAKCRDorT+BmrEOeCUOAJ9qmR0l EXzeoxcdoafxqf6gZlJZlACgkWF7wi2YLW3Oa+jv2QSTlrx4KLM= =Wi5D -----END PGP PUBLIC KEY BLOCK----- After importing the keys, you can verify any tag with: git tag -v TAG_NAME Obtain proprietary binaries \u00b6 AOSP can't be used from pure source code only and requires additional hardware-related proprietary libraries to run, such as for hardware graphics acceleration. See the sections below for download links and Device binaries for additional resources. Info Some devices package these proprietary binaries on their /vendor partition. Download proprietary binaries \u00b6 You can download official binaries for the supported devices running tagged AOSP release branches from Google's drivers. These binaries add access to additional hardware capabilities with non-open source code. To build the AOSP master branch, use the Binaries Preview instead. When building the master branch for a device, use the binaries for the most recent numbered release or with the most recent date. Extract proprietary binaries \u00b6 Each set of binaries comes as a self-extracting script in a compressed archive. Uncompress each archive, run the included self-extracting script from the root of the source tree, then confirm you agree to the terms of the enclosed license agreement. The binaries and their matching makefiles are installed in the vendor/ hierarchy of the source tree. Clean up \u00b6 To ensure the newly installed binaries are properly taken into account after being extracted, delete the existing output of any previous build using: make clobber","title":"Download the Source"},{"location":"downloads/download-the-source/#initializing-a-repo-client","text":"After installing the Repo Launcher, set up your client to access the AespaOS source repository: Create an empty directory to hold your working files. If you're using macOS, this has to be on a case-sensitive filesystem. Give it any name you like: mkdir WORKING_DIRECTORY cd WORKING_DIRECTORY Configure Git with your real name and email address. To use the Gerrit code-review tool, you need an email address that's connected with a registered Google account. Make sure that this is a live address where you can receive messages. The name that you provide here shows up in attributions for your code submissions. git config --global user.email you@example.com git config --global user.name Your Name Run repo init to get the latest version of Repo with its most recent bug fixes. You must specify a URL for the manifest, which specifies where the various repositories included in the AespaOS source are placed within your working directory. repo init -u https://source.aespadev.ml/platform/manifest To check out the master branch: repo init -u https://source.aespadev.ml/platform/manifest -b master To check out a branch other than master, specify it with -b. For a list of branches, see Source code tags and builds. For macOS only: if repo init fails on macOS due to a certificate error, you might need to run the following first: open /Applications/Python \\ 3 .6/Install \\ Certificates.command If using Git version 2.19 or greater, you can specify --partial-clone when performing repo init. This makes use of Git's partial clone capability to only download Git objects when needed, instead of downloading everything. Because using partial clones means that many operations must communicate with the server, use the following if you're a developer and you're using a network with low latency: repo init -u https://source.aespadev.ml/platform/manifest -b master --partial-clone --clone-filter = blob:limit = 10M For Windows OS only: if you get an error message stating that symbolic links couldn't be created, causing repo init to fail, reference the GitHub Symbolic Links documentation to create these, or to enable their support. For non-administrators, see the Allowing non-administrators to create symbolic links section. A successful initialization ends with a message stating that Repo is initialized in your working directory. Your client directory now contains a .repo directory where files such as the manifest are kept.","title":"Initializing a Repo client"},{"location":"downloads/download-the-source/#downloading-the-aespaos-source-tree","text":"To download the AespaOS source tree to your working directory from the repositories as specified in the default manifest, run: repo sync To speed syncs, pass the -c (current branch) and -j threadcount flags: repo sync -c -j8 The AespaOS source files are downloaded in your working directory under their project names. To suppress output, pass the -q (quiet) flag. See the Repo Command Reference for all options.","title":"Downloading the AespaOS source tree"},{"location":"downloads/download-the-source/#using-authentication","text":"By default, access to the AespaOS source code is anonymous. To protect the servers against excessive use, each IP address is associated with a quota. When sharing an IP address with other users (for example, when accessing the source repositories from beyond a NAT firewall), the quotas can trigger even for regular use patterns (for example, if many users sync new clients from the same IP address within a short period). In that case, you can use authenticated access, which then uses a separate quota for each user, regardless of the IP address. First, create a password with the password generator and follow the instructions on the password generator page. Next, force authenticated access by using the manifest URI https://source.aespadev.ml/a/platform/manifest . Notice how the /a/ directory prefix triggers mandatory authentication. You can convert an existing client to use mandatory authentication with the following command: repo init -u https://source.aespadev.com/a/platform/manifest","title":"Using authentication"},{"location":"downloads/download-the-source/#troubleshooting-network-issues","text":"When downloading from behind a proxy (which is common in some corporate environments), you might need to to explicitly specify the proxy for Repo to use: export HTTP_PROXY = http://<proxy_user_id>:<proxy_password>@<proxy_server>:<proxy_port> export HTTPS_PROXY = http://<proxy_user_id>:<proxy_password>@<proxy_server>:<proxy_port> More rarely, Linux clients experience connectivity issues, getting stuck in the middle of downloads (typically during receiving objects). Adjusting the settings of the TCP/IP stack and using non-parallel commands can improve the situation. You must have root access to modify the TCP setting: sudo sysctl -w net.ipv4.tcp_window_scaling = 0 repo sync -j1","title":"Troubleshooting network issues"},{"location":"downloads/download-the-source/#using-a-local-mirror","text":"When using several clients, especially in situations where bandwidth is scarce, it's better to create a local mirror of the entire server content, and to sync clients from that mirror (which requires no network access). The download for a full mirror is smaller than the download of two clients, and it contains more information. These instructions assume that the mirror is created in /usr/local/aosp/mirror . First, create and sync the mirror itself. Notice the --mirror flag, which you can specify only when creating a new client: mkdir -p /usr/local/aosp/mirror cd /usr/local/aosp/mirror repo init -u https://source.aespadev.ml/mirror/manifest --mirror repo sync When the mirror is synced, you can create new clients from it. Note that you must specify an absolute path: mkdir -p /usr/local/aosp/master cd /usr/local/aosp/master repo init -u /usr/local/aosp/mirror/platform/manifest.git repo sync Finally, to sync a client against the server, sync the mirror against the server, then the client against the mirror: cd /usr/local/aosp/mirror repo sync cd /usr/local/aosp/master repo sync It's possible to store the mirror on a LAN server and to access it over NFS, SSH, or Git. It's also possible to store it on a removable drive and to pass that drive among users or machines.","title":"Using a local mirror"},{"location":"downloads/download-the-source/#verifying-git-tags","text":"Load the following public key into your GnuPG key database. The key is used to sign annotated tags that represent releases. gpg --import Copy and paste the key below, then type EOF (Ctrl-D) to end the input and process the keys. -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1.4.2.2 (GNU/Linux) mQGiBEnnWD4RBACt9/h4v9xnnGDou13y3dvOx6/t43LPPIxeJ8eX9WB+8LLuROSV lFhpHawsVAcFlmi7f7jdSRF+OvtZL9ShPKdLfwBJMNkU66/TZmPewS4m782ndtw7 8tR1cXb197Ob8kOfQB3A9yk2XZ4ei4ZC3i6wVdqHLRxABdncwu5hOF9KXwCgkxMD u4PVgChaAJzTYJ1EG+UYBIUEAJmfearb0qRAN7dEoff0FeXsEaUA6U90sEoVks0Z wNj96SA8BL+a1OoEUUfpMhiHyLuQSftxisJxTh+2QclzDviDyaTrkANjdYY7p2cq /HMdOY7LJlHaqtXmZxXjjtw5Uc2QG8UY8aziU3IE9nTjSwCXeJnuyvoizl9/I1S5 jU5SA/9WwIps4SC84ielIXiGWEqq6i6/sk4I9q1YemZF2XVVKnmI1F4iCMtNKsR4 MGSa1gA8s4iQbsKNWPgp7M3a51JCVCu6l/8zTpA+uUGapw4tWCp4o0dpIvDPBEa9 b/aF/ygcR8mh5hgUfpF9IpXdknOsbKCvM9lSSfRciETykZc4wrRCVGhlIEFuZHJv aWQgT3BlbiBTb3VyY2UgUHJvamVjdCA8aW5pdGlhbC1jb250cmlidXRpb25AYW5k cm9pZC5jb20+iGAEExECACAFAknnWD4CGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIX gAAKCRDorT+BmrEOeNr+AJ42Xy6tEW7r3KzrJxnRX8mij9z8tgCdFfQYiHpYngkI 2t09Ed+9Bm4gmEO5Ag0ESedYRBAIAKVW1JcMBWvV/0Bo9WiByJ9WJ5swMN36/vAl QN4mWRhfzDOk/Rosdb0csAO/l8Kz0gKQPOfObtyYjvI8JMC3rmi+LIvSUT9806Up hisyEmmHv6U8gUb/xHLIanXGxwhYzjgeuAXVCsv+EvoPIHbY4L/KvP5x+oCJIDbk C2b1TvVk9PryzmE4BPIQL/NtgR1oLWm/uWR9zRUFtBnE411aMAN3qnAHBBMZzKMX LWBGWE0znfRrnczI5p49i2YZJAjyX1P2WzmScK49CV82dzLo71MnrF6fj+Udtb5+ OgTg7Cow+8PRaTkJEW5Y2JIZpnRUq0CYxAmHYX79EMKHDSThf/8AAwUIAJPWsB/M pK+KMs/s3r6nJrnYLTfdZhtmQXimpoDMJg1zxmL8UfNUKiQZ6esoAWtDgpqt7Y7s KZ8laHRARonte394hidZzM5nb6hQvpPjt2OlPRsyqVxw4c/KsjADtAuKW9/d8phb N8bTyOJo856qg4oOEzKG9eeF7oaZTYBy33BTL0408sEBxiMior6b8LrZrAhkqDjA vUXRwm/fFKgpsOysxC6xi553CxBUCH2omNV6Ka1LNMwzSp9ILz8jEGqmUtkBszwo G1S8fXgE0Lq3cdDM/GJ4QXP/p6LiwNF99faDMTV3+2SAOGvytOX6KjKVzKOSsfJQ hN0DlsIw8hqJc0WISQQYEQIACQUCSedYRAIbDAAKCRDorT+BmrEOeCUOAJ9qmR0l EXzeoxcdoafxqf6gZlJZlACgkWF7wi2YLW3Oa+jv2QSTlrx4KLM= =Wi5D -----END PGP PUBLIC KEY BLOCK----- After importing the keys, you can verify any tag with: git tag -v TAG_NAME","title":"Verifying Git tags"},{"location":"downloads/download-the-source/#obtain-proprietary-binaries","text":"AOSP can't be used from pure source code only and requires additional hardware-related proprietary libraries to run, such as for hardware graphics acceleration. See the sections below for download links and Device binaries for additional resources. Info Some devices package these proprietary binaries on their /vendor partition.","title":"Obtain proprietary binaries"},{"location":"downloads/download-the-source/#download-proprietary-binaries","text":"You can download official binaries for the supported devices running tagged AOSP release branches from Google's drivers. These binaries add access to additional hardware capabilities with non-open source code. To build the AOSP master branch, use the Binaries Preview instead. When building the master branch for a device, use the binaries for the most recent numbered release or with the most recent date.","title":"Download proprietary binaries"},{"location":"downloads/download-the-source/#extract-proprietary-binaries","text":"Each set of binaries comes as a self-extracting script in a compressed archive. Uncompress each archive, run the included self-extracting script from the root of the source tree, then confirm you agree to the terms of the enclosed license agreement. The binaries and their matching makefiles are installed in the vendor/ hierarchy of the source tree.","title":"Extract proprietary binaries"},{"location":"downloads/download-the-source/#clean-up","text":"To ensure the newly installed binaries are properly taken into account after being extracted, delete the existing output of any previous build using: make clobber","title":"Clean up"},{"location":"guides/boot-mgr-unlock/","text":"Preparing the system for the boot manager unlock process \u00b6 Before unlocking the boot manager, you will need to tweak some system settings. First, you will need to enable Developer Mode. You can do this by going to Settings > System Software Information > Build Information and clicking the build number 5 times. Next, you will need to enable USB debugging and OEM unlock. These toggles are located in Settings > Developer Options under the System Software Modification category. Lastly, you need to back up any important data because boot manager / boot loader modifications could cause permanent damage to your system. Reboot device into recovery mode \u00b6 Once you have changed settings accordingly, you need to reboot your device into Recovery mode to initiate the boot manager / boot loader unlocking process. PC \u00b6 Open command prompt and type sudo aspboot.efi --mode=recovery . The computer will be rebooted into recovery mode. Info You will need super user permissions to execute this command. Mobile \u00b6 Hold down the power, volume down, and volume up buttons simultaneously for 7 seconds. The phone will be rebooted into recovery mode. Playstation 4 \u00b6 Hold down the Playstation power button for 20 seconds. The console will be rebooted into recovery mode. Initiate the unlocking process \u00b6 When you are in Recovery mode, you need to select Advanced options and navigate to Terminal Prompt . Once at the terminal prompt, type the following commands in order: adb --authenticate-super-user --key={your_device_passcode} adb --unlock-boot-loader Info This command could take up to an hour to complete. adb --boot --mod --options=AespaConf[True],AespaBootMgrLdrUnlock[True] diskpart --open diskpart lst dsk diskpart sel dsk /dev/sdb1/boot diskpart clean part $sel diskpart --exit asp --firmware-edit --remove=\"BootMgrLdrLock\" rm /system/efi/boot/bootmgrldrlock.lck Reboot your device \u00b6 After running the above commands and unlocking your bootloader, reboot your device and you will need to run through the Out Of Box Experience again. Once that is done, you are finished! You have successfully unlocked your boot loader and can install custom OS's, and install custom firmware. You can restore the locked boot manager / loader state at any time by performing the same steps but replacing the second terminal command with adb --lock-boot-loader .","title":"Unlock Boot Manager"},{"location":"guides/boot-mgr-unlock/#preparing-the-system-for-the-boot-manager-unlock-process","text":"Before unlocking the boot manager, you will need to tweak some system settings. First, you will need to enable Developer Mode. You can do this by going to Settings > System Software Information > Build Information and clicking the build number 5 times. Next, you will need to enable USB debugging and OEM unlock. These toggles are located in Settings > Developer Options under the System Software Modification category. Lastly, you need to back up any important data because boot manager / boot loader modifications could cause permanent damage to your system.","title":"Preparing the system for the boot manager unlock process"},{"location":"guides/boot-mgr-unlock/#reboot-device-into-recovery-mode","text":"Once you have changed settings accordingly, you need to reboot your device into Recovery mode to initiate the boot manager / boot loader unlocking process.","title":"Reboot device into recovery mode"},{"location":"guides/boot-mgr-unlock/#pc","text":"Open command prompt and type sudo aspboot.efi --mode=recovery . The computer will be rebooted into recovery mode. Info You will need super user permissions to execute this command.","title":"PC"},{"location":"guides/boot-mgr-unlock/#mobile","text":"Hold down the power, volume down, and volume up buttons simultaneously for 7 seconds. The phone will be rebooted into recovery mode.","title":"Mobile"},{"location":"guides/boot-mgr-unlock/#playstation-4","text":"Hold down the Playstation power button for 20 seconds. The console will be rebooted into recovery mode.","title":"Playstation 4"},{"location":"guides/boot-mgr-unlock/#initiate-the-unlocking-process","text":"When you are in Recovery mode, you need to select Advanced options and navigate to Terminal Prompt . Once at the terminal prompt, type the following commands in order: adb --authenticate-super-user --key={your_device_passcode} adb --unlock-boot-loader Info This command could take up to an hour to complete. adb --boot --mod --options=AespaConf[True],AespaBootMgrLdrUnlock[True] diskpart --open diskpart lst dsk diskpart sel dsk /dev/sdb1/boot diskpart clean part $sel diskpart --exit asp --firmware-edit --remove=\"BootMgrLdrLock\" rm /system/efi/boot/bootmgrldrlock.lck","title":"Initiate the unlocking process"},{"location":"guides/boot-mgr-unlock/#reboot-your-device","text":"After running the above commands and unlocking your bootloader, reboot your device and you will need to run through the Out Of Box Experience again. Once that is done, you are finished! You have successfully unlocked your boot loader and can install custom OS's, and install custom firmware. You can restore the locked boot manager / loader state at any time by performing the same steps but replacing the second terminal command with adb --lock-boot-loader .","title":"Reboot your device"},{"location":"guides/custom-firmware/","text":"Warning Coming soon!","title":"Custom Firmware"}]}